
import torch
import random

class DoubleDQNAgent(object):
    
    def __init__(self, main_network : torch.nn.Module, target_network : torch.nn.Module, memory, epsilon_info, gamma, tau, env) -> None:

        self.memory = memory
        self.q_net = main_network
        self.q_net_prime = target_network

        self.env = env

        self.epsilon, self.min_epsilon, self.epsilon_decay = epsilon_info
        self.gamma = gamma
        self.tau = tau
    
    def chooseAction(self, state):
        
        # With probability Epsilon, select a random action
        if random.random() < self.epsilon:
            return self.env.action_space.sample()
        
        # Generate Expected Future Return
        state_tensor = torch.tensor(state)
        q_values = self.q_net.forward(state_tensor)
        
        # Select the action with the best estimated future return
        return torch.argmax(q_values).item()
    
    def learnFromMemory(self, batch_size):
        
        # Being the learning process when the number of experiences in the buffer is greater than the batch sized desired
        if len(self.memory.buffer) < batch_size:
            return
        
        states, actions, rewards, next_states, dones = self.memory.sample(batch_size)

        q_values = self.q_net(states)
        next_q_values_prime = self.q_net_prime(next_states)

        '''
        Selected using the Q values generated by the main network (Q)
        Returns a 1D tensor of the q values reflecting the actions that the agent took at that state in the past
        '''
        q_values_of_actions_taken = q_values[torch.arange(q_values.size(0)), actions]

        '''
        Select the best action to take, given the q values generated by the target network (Q')
        Returns a 1D tensor of the best action to take given the state
        '''
        actions_prime = torch.argmax(next_q_values_prime, dim=1)
        

        next_q_values = self.q_net(next_states)
        '''
        Using the actions_prime generated by the target network, select the q values of taking action prime (a') 
        generated using the target network, given the state
        Returns a 1D Tensor of q values generated using the main network (Q) at time T + 1 given action prime (a')
        '''
        next_q_values_of_actions_taken = next_q_values[torch.arange(next_q_values.size(0)), actions_prime]


        q_target = rewards + self.gamma * next_q_values_of_actions_taken * ~dones

        loss = self.q_net.loss(q_values_of_actions_taken, q_target)
        self.q_net.optimizer.zero_grad()
        loss.backward()
        self.q_net.optimizer.step()
        
        self.epsilon *= self.epsilon_decay
        self.epsilon = max(self.epsilon, self.min_epsilon)

        for target_param, param in zip(self.q_net_prime.parameters(), self.q_net.parameters()):
            target_param.data.copy_(self.tau * param + (1 - self.tau) * target_param)
